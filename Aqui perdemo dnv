#Question 1:

def search_insert(lista, position):
    first_position = 0
    final_position = len(lista) - 1
   
    while first_position <= final_position:
        half = (first_position + final_position)//2
        if lista[half] == position:
            return half
        elif lista[half] <= position:
            first_position = half + 1
        else:
            final_position = half - 1
    return final_position + 1

search_insert([1, 2, 3, 5, 7], 6)


#Question 2:
#a)
def triangulo_pascal(n):
    triangle = []
    for i in range(n):
        line = [1]*(i + 1)
       
        for j in range(1, i):
          line[j] = triangle[i - 1][j - 1] + triangle[i - 1][j]
        triangle.append(line)
    return triangle
  
for linha in triangulo_pascal(6):
   print(linha)

#b)

# A complexidade de tempo é O(n²).


#Question 3:

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class LinkedList:
    def __init__(self, head=None):
        self.head = head
        self.length = self.calculate_length()
    
    def calculate_length(self):
        current = self.head
        length = 0
        while current:
            length += 1
            current = current.next
        return length
    
    def delete_node(self, target):
        if not self.head:
            return
        
        prev = None
        current = self.head
        
        while current:
            if current.val == target:
                if prev:
                    prev.next = current.next
                else:
                    self.head = current.next
                self.length -= 1
            else:
                prev = current
            current = current.next
    
    def __add__(self, other_list):
        # Concatenando duas listas encadeadas
        if not self.head:
            return other_list
        
        current = self.head
        while current.next:
            current = current.next
        
        current.next = other_list.head
        self.length += other_list.length
        
        return self
    
    def __str__(self):
        if not self.head:
            return "LinkedList: empty"
        
        current = self.head
        result = "LinkedList: "
        while current:
            result += str(current.val) + " -> "
            current = current.next
        result += "None"
        return result

#Análise de complexidade:
# __init__: O(n) por causa do cálculo do comprimento.
# delete_node : O(n) já que precisamos percorrer toda a lista para encontrar e remover os nós com o valor alvo.
#__add__ : O(m) , onde m é o número de nós na segunda lista, pois precisamos encontrar o último nó da primeira lista para anexar a segunda lista.


#Question 4:

def polynomial(poly):
    coefficients = {}
    
    # Remove espaços em branco e substituir '−' por '-'
    poly = poly.replace(' ', '')
    
    # Dividir o polinômio em termos
    terms = []
    current_term = ''
    
    # Loop para separar os termos
    i = 0
    while i < len(poly):
        if poly[i] == '+' or poly[i] == '-':
            # Adiciona o termo atual à lista de termos
            if current_term != '':
                terms.append(current_term)
            # Inicia um novo termo com o sinal
            current_term = poly[i]
        else:
            # Continua a construir o termo atual
            current_term += poly[i]
        i += 1
    
    # Adiciona o último termo à lista de termos
    if current_term != '':
        terms.append(current_term)
    
    # Processa cada termo para extrair coeficiente e grau
    for term in terms:
        if 'x' in term:
            if '^' in term:
                coef, power = term.split('x^')
                if coef == '' or coef == '+':
                    coef = '1'
                coefficients[int(power)] = int(coef)
            else:
                if term == 'x':
                    coef = '1'
                elif term == '-x':
                    coef = '-1'
                else:
                    coef = term.replace('x', '')
                    if coef == '' or coef == '+':
                        coef = '1'
                coefficients[1] = int(coef)
        else:
            # Termo constante
            coefficients[0] = int(term)
    
    return coefficients
polynomial('2x^3+3x^2-4x+5')


#Question 5:

def dict_poly(poly_dict):
   #Vamos ordenar os graus do polinômio em ordem decrescente
    sorted_degrees = sorted(poly_dict.keys(), reverse = True)
    terms = []
    for degree in sorted_degrees:
        coefficient = poly_dict[degree]
        if coefficient == 0:
            continue
        
        if degree == 0:
            # Termo constante
            if coefficient > 0 and len(terms) > 0:
                terms.append(f"+{coefficient}")
            else:
                terms.append(f"{coefficient}")
        elif degree == 1:
            # Termo linear
            if coefficient == 1:
                terms.append("+x")
            elif coefficient == -1:
                terms.append("-x")
            elif coefficient > 0 and len(terms) > 0:
                terms.append(f"+{coefficient}x")
            else:
                terms.append(f"{coefficient}x")
        else:
            # Termos de grau maior que 1
            if coefficient == 1:
                terms.append(f"+x^{degree}")
            elif coefficient == -1:
                terms.append(f"-x^{degree}")
            elif coefficient > 0 and len(terms) > 0:
                terms.append(f"+{coefficient}x^{degree}")
            else:
                terms.append(f"{coefficient}x^{degree}")
    
# Junta todos os termos em uma única string
    polynomial_str = ''.join(terms)
    
# Remove o sinal de "+" redundante no início, se houver
    if polynomial_str[0] == '+':
        polynomial_str = polynomial_str[1:]
    return polynomial_str

poly_dict = {2: 1, 1: -2, 0: 3}
dict_poly(poly_dict)
